

1、在文件 pom.xml 中加入编码问题和版本声明
	// 2020-4-30 08:49:35
	  <properties>
	    <java.version>1.8</java.version>
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	  </properties>
	  
	  说明： 指定jdk版本号，执行源码、编译时、生成时编码问题
	  
2、在文件 pom.xml 中 SpringBoot 依赖管理

		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.2.6.RELEASE</version>
		</parent>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
	  说明： 
	  		spring-boot-starter-parent SpringBoot依赖管理
	  		spring-boot-starter-web SpringBootWeb核心作用
	  		
3、在文件 pom.xml 中加入 SpringBoot  插件依赖启动

		<build>
			<finalName>api</finalName>
		    <plugins>
		        <plugin>
		            <groupId>org.springframework.boot</groupId>
		            <artifactId>spring-boot-maven-plugin</artifactId>
		        </plugin>
		    </plugins>
		</build>
		
	说明：
			finalName中内容表示jar/war包的名称，如果打包成jar包或者war包，自动以其内容为名
			spring-boot-maven-plugin 如果需要在main方法中启动Spring，必须加入插件，否则无法启动。还可以将项目打包成一个可执行的jar包。
			
4、方式一：

		@org.springframework.web.bind.annotation.RestController
		@org.springframework.boot.autoconfigure.EnableAutoConfiguration
		public class Application {
		
			public static void main(String[] args) {
				org.springframework.boot.SpringApplication.run(Application.class,args);
			}
			
			@org.springframework.web.bind.annotation.RequestMapping("/hello")
			public String index() {
				return"Hello World";
			}
		}
		
5、方式一的注解说明：
		@RestController
			表示修饰该Controller所有的方法返回JSON格式,直接可以编写Restful接口
			
		@EnableAutoConfiguration
			 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置
			 
6、引入 freemarker 模版依赖

		<!-- 引入freeMarker的依赖包. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>

7、JSP

		引入JSP依赖
			<dependency>
				<groupId>org.apache.tomcat.embed</groupId>
				<artifactId>tomcat-embed-jasper</artifactId>
			</dependency>

		application.properties
			spring.mvc.view.prefix=/WEB-INF/jsp/
			spring.mvc.view.suffix=.jsp

8、数据库访问

		引入 JDBC 依赖
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-jdbc</artifactId>
			</dependency>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>5.1.21</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
			
		application.properties
			spring.datasource.url=jdbc:mysql://localhost:3306/test
			spring.datasource.username=root
			spring.datasource.password=root
			spring.datasource.driver-class-name=com.mysql.jdbc.Driver
				
9、

		Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
		未能配置数据源：未指定“url”属性，无法配置嵌入的数据源。
		
		########################################################
		###  驱动配置
		########################################################
		spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
		spring.datasource.url=jdbc:mysql://127.0.0.1:3306/databasetest?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
		spring.datasource.username=root
		spring.datasource.password=1234
		
10、

		Field jdbcMapper in vip.juner.springboot.web.system.controller.TestController required a bean of type 'vip.juner.springboot.web.system.mapper.JDBCMapper' that could not be found.
		
		The injection point has the following annotations:
			- @org.springframework.beans.factory.annotation.Autowired(required=true)
		
		Action:
		Consider defining a bean of type 'vip.juner.springboot.web.system.mapper.JDBCMapper' in your configuration.
		
		
		