<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace 指定对应映射类 -->
<mapper namespace="vip.juner.springboot.web.system.mapper.JDBCMapper" >
  <!-- 要想使用 resultMap 复杂返回类型，最好写一个resultMap -->
  <!-- id：为链接地址  type：为链接到Java实体类中的对应类型-->
  <resultMap id="BaseResultMap" type="vip.juner.springboot.web.system.model.JDBC" >
    <!-- id 为主键 -->
    <!-- result 非主键，column对应数据库中的字段名，property对应Java实体类中的属性名，jdbcType对应数据类型-->
    <result column="uid" property="uid" jdbcType="VARCHAR" />
    <result column="name" property="uname" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
  </resultMap>
  <!-- 查询数据库中的对应的字段名，id为链接地址 -->
  <sql id="Base_Column_List" >
    id, uid, name, age
  </sql>
  <!-- select查询数据，id对应映射类Java中的方法名，resultMap对应返回数据类型，parameterType对应参数类型（java.lang.Integer或者实体类） -->
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select <include refid="Base_Column_List" /> from users
  </select>
  
  <select id="findListByYear" resultMap="BaseResultMap" parameterType="vip.juner.springboot.web.system.mapper.JDBC" >
    select <include refid="Base_Column_List" /> from users
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  
  <select id="findAllListByYear" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from num
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from juner..num
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="vip.juner.System.model.Num" >
    insert into juner..num (id, num1, num2, 
      num3)
    values (#{id,jdbcType=INTEGER}, #{num1,jdbcType=INTEGER}, #{num2,jdbcType=INTEGER}, 
      #{num3,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="vip.juner.System.model.Num" >
    insert into juner..num
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="num1 != null" >
        num1,
      </if>
      <if test="num2 != null" >
        num2,
      </if>
      <if test="num3 != null" >
        num3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="num1 != null" >
        #{num1,jdbcType=INTEGER},
      </if>
      <if test="num2 != null" >
        #{num2,jdbcType=INTEGER},
      </if>
      <if test="num3 != null" >
        #{num3,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="vip.juner.System.model.Num" >
    update juner..num
    <set >
      <if test="num1 != null" >
        num1 = #{num1,jdbcType=INTEGER},
      </if>
      <if test="num2 != null" >
        num2 = #{num2,jdbcType=INTEGER},
      </if>
      <if test="num3 != null" >
        num3 = #{num3,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="vip.juner.System.model.Num" >
    update juner..num
    set num1 = #{num1,jdbcType=INTEGER},
      num2 = #{num2,jdbcType=INTEGER},
      num3 = #{num3,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>